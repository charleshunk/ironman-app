{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","race","name","src","logo","key","id","CardList","races","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredRaces","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAIaA,G,MAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,YAAYC,IAAKF,EAAMG,KAAKC,KAAMC,IAAKL,EAAMG,KAAKG,OACjE,wBAAIC,IAAKP,EAAMG,KAAKK,IAAKR,EAAMG,KAAKC,SCFnCK,G,MAAW,SAACT,GACrB,OACA,yBAAKC,UAAU,aACVD,EAAMU,MAAMC,KAAI,SAAAR,GAAI,OACrB,kBAAC,EAAD,CAAMI,IAAKJ,EAAKK,GAAIL,KAAMA,UCNrBS,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,2BACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0DHG,G,wDA5Db,aAAe,IAAD,8BACZ,gBAkCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjCtC,EAAKC,MAAQ,CACXb,MAAO,CACL,CACEN,KAAM,uBACNI,GAAI,OACJF,KAAM,iIAER,CACEF,KAAM,iBACNI,GAAI,OACJF,KAAM,+FAER,CACEF,KAAM,gBACNI,GAAI,OACJF,KAAM,0FAER,CACEF,KAAM,oBACNI,GAAI,OACJF,KAAM,+GAER,CACEF,KAAM,4BACNI,GAAI,OACJF,KAAM,6GAGVc,YAAa,IA/BH,E,qDAuCJ,IAAD,EACwBI,KAAKD,MAA5Bb,EADD,EACCA,MAAOU,EADR,EACQA,YACTK,EAAgBf,EAAMgB,QAAO,SAAAvB,GAAI,OACrCA,EAAKC,KAAKuB,cAAcC,SAASR,EAAYO,kBAG/C,OACA,yBAAK1B,UAAU,OACb,wBAAIA,UAAU,aAAd,wBACA,kBAAC,EAAD,CACAY,YAAY,eACZC,aAAcU,KAAKV,eAEnB,kBAAC,EAAD,CAAUJ,MAAOe,S,GArDLI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ccccd66.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    return(\n        <div className='card-container'>\n            <img className='card-logo' alt={props.race.name} src={props.race.logo}></img>\n            <h1 key={props.race.id}>{props.race.name}</h1>\n        </div>\n    )\n}","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n    return(\n    <div className='card-list'>\n        {props.races.map(race => (\n        <Card key={race.id} race={race}/>\n      ))}</div>)\n}\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return(\n        <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n        />\n    )\n}","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      races: [\n        {\n          name: 'IRONMAN South Africa',\n          id: 'IMZA',\n          logo: 'https://cdn1.sportngin.com/attachments/photo/2763-135730058/IRONMAN_African_Championship_South_Africa_Logo_2020_pos_large.png'\n        },\n        {\n          name: 'IRONMAN Taiwan',\n          id: 'IMTW',\n          logo: 'https://cdn2.sportngin.com/attachments/photo/5677-135691719/IRONMAN_Taiwan_100x-8_large.png'\n        },\n        {\n          name: 'IRONMAN Texas',\n          id: 'IMTX',\n          logo: 'https://cdn1.sportngin.com/attachments/photo/df0a-135696449/im_texas_10years_large.png'\n        },\n        {\n          name: 'IRONMAN Frankfurt',\n          id: 'IMFR',\n          logo: 'https://cdn4.sportngin.com/attachments/photo/1b54-135308098/Mainova_IRONMANFfm_EuroChamp_2016_pos_large.png'\n        },\n        {\n          name: 'IRONMAN Western Australia',\n          id: 'IMWA',\n          logo: 'https://cdn4.sportngin.com/attachments/photo/517e-136112430/IRONMAN_WesternAustralia_Busselton_large.png'\n        }\n      ],\n      searchField: ''\n    };\n  }\n  \n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  \n  render() {\n    const { races, searchField } = this.state;\n    const filteredRaces = races.filter(race =>\n      race.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n    <div className=\"App\">\n      <h1 className='irontitle'>ANYTHING IS POSSIBLE</h1>\n      <SearchBox\n      placeholder='search races'\n      handleChange={this.handleChange}\n      />\n      <CardList races={filteredRaces}>\n      </CardList>\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}